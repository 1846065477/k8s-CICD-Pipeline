
echo | base64 -d > /opt/ca.crt
echo | base64 -d > /opt/client.crt
echo | base64 -d > /opt/client.key

openssl pkcs12 -export -out /opt/cert.pfx -inkey /opt/client.key -in /opt/client.crt -certfile /opt/ca.crt



podTemplate(label: 'jnlp-slave', cloud: 'kubernetes',containers: [
    containerTemplate(
        name: 'jnlp',
        image: '172.16.8.179/qas/jenkins-slave:jnlp',
        alwaysPullImage: true
    ),
  ],
  volumes: [
    hostPathVolume( mountPath: '/run/docker.sock',hostPath: '/run/docker.sock' ),
    hostPathVolume( mountPath: '/opt/kube/bin/docker',hostPath: '/opt/kube/bin/docker' ),
    hostPathVolume( mountPath: '/usr/local/jdk',hostPath: '/usr/local/jdk' ),
    hostPathVolume( mountPath: '/usr/local/maven',hostPath: '/usr/local/maven' )
  ],
  imagePullSecrets: ['registry-pull-secret'],
)
{
node('jnlp-slave') {
    stage('Git Clone') {
        echo "1.Clone Stage"
        git url: "http://172.16.8.169:3000/devops/k8s-demo.git"
        script {
            build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
        }
    }
    stage('SonarQube') {
      echo "2.Test Stage"
    }
    stage('Build') {
        echo "3.Build Docker Image Stage"
        input "确认是否要部署测试环境！"
        sh "docker build -t 172.16.8.179/project/solo:${build_tag} ."
    }
    stage('Push') {
      echo "4.Push Docker Image Stage"
      withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        sh "docker login 172.16.8.179 -u ${dockerHubUser} -p ${dockerHubPassword}"
        sh "docker push 172.16.8.179/project/solo:${build_tag}"
    }
    }
    stage('Deploy') {
    echo "5. Deploy Stage"
    sh "sed -i 's/<BUILD_TAG>/${build_tag}/' k8s.yaml"
    kubernetesDeploy configs: 'k8s.yaml', kubeConfig: [path: ''], kubeconfigId: 'c9d36c83-5c0c-44f5-b24e-02f70b8594da', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
    stage('Deploy') {

    }
    }
}
}

